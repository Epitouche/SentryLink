# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  backend:
    container_name: backend
    build:
      target: finalBackend
      dockerfile: Dockerfile
    ports:
      - 8080:8000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-networks
    env_file:
      - ./backend/.env

  frontend:
    container_name: frontend
    build:
      target: baseFrontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - 3000:3000
      - 3001:3001
    networks:
      - app-networks

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
      POSTGRES_USER: admin
      DB_HOST: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-networks
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db-data:
# secrets:
#   db-password:
#     file: db/password.txt
networks:
  app-networks: