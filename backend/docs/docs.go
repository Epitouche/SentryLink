// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
  "schemes": {{ marshal .Schemes }},
  "basePath": "{{.BasePath}}",
  "host": "{{.Host}}",
  "info": {
    "contact": {},
    "description": "{{escape .Description}}",
    "title": "{{.Title}}",
    "version": "{{.Version}}"
  },

  "definitions": {
    "api.LinkApi": {
      "type": "object"
    },
    "schemas.JWT": {
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "schemas.Response": {
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "description": "Authenticate a user and provide a JWT to authorize API calls",
        "parameters": [
          {
            "description": "string",
            "in": "formData",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "string",
            "in": "formData",
            "name": "password",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "JWT",
            "schema": {
              "$ref": "#/definitions/schemas.JWT"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Response"
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "description": "Register a new user",
        "parameters": [
          {
            "description": "string",
            "in": "formData",
            "name": "password",
            "required": true,
            "type": "string"
          },
          {
            "description": "string",
            "in": "formData",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "string",
            "in": "formData",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User registered successfully",
            "schema": {
              "$ref": "#/definitions/schemas.Response"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/schemas.Response"
            }
          },
          "409": {
            "description": "User already exists",
            "schema": {
              "$ref": "#/definitions/schemas.Response"
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/scrap": {
"get": {        "description": "Scrap an url and return all the links",
        "parameters": [
          {
            "description": "string",
            "in": "query",
            "name": "linkToScrap",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Scrapped links",
            "schema": {
              "$ref": "#/definitions/schemas.Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schemas.Response"
            }
          }
        },
        "tags": [
          "scrap"
        ]
      }
    }
  },
  "securityDefinitions": {
    "bearerAuth": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}` // SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:		"",
	Host:			"",
	BasePath:		"",
	Schemes:		[]string{},
	Title:			"",
	Description:		"",
	InfoInstanceName:	"swagger",
	SwaggerTemplate:	docTemplate,
	LeftDelim:		"{{",
	RightDelim:		"}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
